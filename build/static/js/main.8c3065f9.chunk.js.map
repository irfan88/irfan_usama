{"version":3,"sources":["logo.svg","utils/getRpcUrl.js","utils/web3.js","hooks/useWeb3.js","state/toasts/index.js","state/hooks.js","utils/web3React.js","utils/wallet.js","hooks/useAuth.js","Assests/opensea-logo.svg","utils/contractHelpers.js","ReplicateNftContract.js","redux/Reducers/index.js","redux/store/rootReducer.js","redux/store/index.js","App.js","reportWebVitals.js","index.js"],"names":["nodes","process","REACT_APP_NODE_1","REACT_APP_NODE_2","REACT_APP_NODE_3","getNodeUrl","randomIndex","random","length","RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","web3NoAccount","getWeb3NoAccount","useWeb3","library","useWeb3React","refEth","useRef","useState","web3","setweb3","useEffect","current","toastsSlice","createSlice","name","initialState","data","reducers","push","state","action","payload","toastIndex","findIndex","toast","id","splice","unshift","remove","clear","actions","toastTypes","ConnectorNames","rpcUrl","chainId","parseInt","REACT_APP_CHAIN_ID","injected","InjectedConnector","supportedChainIds","walletconnect","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","bscConnector","BscConnector","connectorsByName","getLibrary","provider","setupNetwork","a","window","ethereum","request","method","params","toString","chainName","nativeCurrency","symbol","decimals","rpcUrls","blockExplorerUrls","console","error","useAuth","activate","deactivate","toastError","dispatch","useDispatch","useMemo","pushToast","title","description","kebabCase","type","toastInfo","toastSuccess","toastWarning","removeToast","clearToast","useToast","login","useCallback","connectorID","connector","UnsupportedChainIdError","walletConnectProvider","undefined","message","logout","MintContract","address","abi","eth","Contract","getContract","Abi","App","account","open","setOpen","status","setStatus","price","setPrice","supply","setSupply","payableAmount","inputs","log","contract","methods","MINT_NFT_FEE","call","totalSupply","Mint","bachMint","send","from","value","then","res","Backdrop","className","sx","color","CircularProgress","onClick","localStorage","setItem","readOnly","src","openSea","alt","initState","input","rootReducer","combineReducers","UserReducer","balance","reward","Getinput","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReplicateNftContract","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"g4UAAe,I,2GCGFA,EAAQ,CAACC,mIAAYC,iBAAkBD,mIAAYE,iBAAkBF,mIAAYG,kBAO/EC,EALI,WACjB,IAAMC,EAAcC,IAAO,EAAGP,EAAMQ,OAAS,GAC7C,OAAOR,EAAMM,ICJTG,EAAUC,IACVC,EAAe,IAAIC,IAAKC,UAAUC,aAAaL,EAAS,CAAEM,QAAS,MACnEC,EAAgB,IAAIJ,IAAKD,GAEzBM,EAAmB,WACvB,OAAOD,GAIMA,ICaAE,EAfC,WAAO,IACbC,EAAYC,cAAZD,QACFE,EAASC,iBAAOH,GAFF,EAGII,mBAASJ,EAAU,IAAIP,IAAKO,GAAWF,KAH3C,mBAGbO,EAHa,KAGPC,EAHO,KAYpB,OAPAC,qBAAU,WACJP,IAAYE,EAAOM,UACrBF,EAAQN,EAAU,IAAIP,IAAKO,GAAWF,KACtCI,EAAOM,QAAUR,KAElB,CAACA,IAEGK,G,0BCfII,EAAcC,YAAY,CACrCC,KAAM,SACNC,aANmB,CACnBC,KAAM,IAMNC,SAAU,CACRC,KAAM,SAACC,EAAOC,GAAY,IAChBC,EAAYD,EAAZC,QACFC,EAAaH,EAAMH,KAAKO,WAAU,SAACC,GAAD,OAAWA,EAAMC,KAAOL,EAAOC,QAAQI,MAG3EH,GAAc,GAChBH,EAAMH,KAAKU,OAAOJ,EAAY,GAGhCH,EAAMH,KAAKW,QAAQN,IAErBO,OAAQ,SAACT,EAAOC,GACd,IAAME,EAAaH,EAAMH,KAAKO,WAAU,SAACC,GAAD,OAAWA,EAAMC,KAAOL,EAAOC,WAEnEC,GAAc,GAChBH,EAAMH,KAAKU,OAAOJ,EAAY,IAGlCO,MAAO,SAACV,GACNA,EAAMH,KAAO,O,EAMoBJ,EAAYkB,QAApCD,E,EAAAA,MAAOD,E,EAAAA,OAAQV,E,EAAAA,KC1BxBa,GD4BSnB,EAAf,QC3Ba,UADPmB,EAEM,SAFNA,EAGO,SAHPA,EAII,S,2BCTJC,EACQ,WADRA,EAEa,gBAFbA,EAGG,MAIHC,EAAS5C,IACT6C,EAAUC,SAASlD,mIAAYmD,mBAAoB,IAEnDC,EAAW,IAAIC,IAAkB,CAAEC,kBAAmB,CAACL,KAEvDM,EAAgB,IAAIC,IAAuB,CAC7CC,IAAI,eAAIR,EAAUD,GAClBU,OAAQ,mCACRC,QAAQ,EACRC,gBAVqB,OAanBC,EAAe,IAAIC,eAAa,CAAER,kBAAmB,CAACL,KAE/Cc,GAAgB,mBACxBhB,EAA0BK,GADF,cAExBL,EAA+BQ,GAFP,cAGxBR,EAAqBc,GAHG,GAMhBG,EAAa,SAACC,GACvB,OAAOA,GCzBEC,EAAY,uCAAG,4BAAAC,EAAA,2DACpBF,EAAYG,OAAQC,UADA,wBAKR,GALQ,kBAOhBJ,EAASK,QAAQ,CACrBC,OAAQ,0BACRC,OAAQ,CACN,CACEvB,QAAQ,KAAD,OANC,IAMcwB,SAAS,KAC/BC,UAAW,8BACXC,eAAgB,CACd9C,KAAM,MACN+C,OAAQ,MACRC,SAAU,IAEZC,QAAS/E,EAETgF,kBAAmB,CAAC,oCApBJ,iCAyBf,GAzBe,uCA2BtBC,QAAQC,MAAR,MA3BsB,mBA4Bf,GA5Be,uCA+BxBD,QAAQC,MAAM,gFA/BU,mBAgCjB,GAhCiB,yDAAH,qDC0BVC,EA5BC,WAAO,IAAD,EACa/D,cAAzBgE,EADY,EACZA,SAAUC,EADE,EACFA,WACVC,EHUc,WACpB,IAAMC,EAAWC,cAuBjB,OAtBgBC,mBAAQ,WACpB,IAAMvD,EAAO,SAACM,GAAD,OAAW+C,EAASG,EAAUlD,KAE3C,MAAO,CACH8C,WAAY,SAACK,EAAOC,GAChB,OAAO1D,EAAK,CAAEO,GAAIoD,oBAAUF,GAAQG,KAAM/C,EAAmB4C,QAAOC,iBAExEG,UAAW,SAACJ,EAAOC,GACf,OAAO1D,EAAK,CAAEO,GAAIoD,oBAAUF,GAAQG,KAAM/C,EAAiB4C,QAAOC,iBAEtEI,aAAc,SAACL,EAAOC,GAClB,OAAO1D,EAAK,CAAEO,GAAIoD,oBAAUF,GAAQG,KAAM/C,EAAoB4C,QAAOC,iBAEzEK,aAAc,SAACN,EAAOC,GAClB,OAAO1D,EAAK,CAAEO,GAAIoD,oBAAUF,GAAQG,KAAM/C,EAAoB4C,QAAOC,iBAEzE1D,OACAU,OAAQ,SAACH,GAAD,OAAQ8C,EAASW,EAAYzD,KACrCI,MAAO,kBAAM0C,EAASY,SAE3B,CAACZ,IGhCiBa,GAAfd,WAuBR,MAAO,CAAEe,MApBKC,uBAAY,SAACC,GACvB,IAAMC,EAAYxC,EAAiBuC,GAC/BC,EACJpB,EAASoB,EAAD,uCAAY,WAAOtB,GAAP,SAAAd,EAAA,2DACdc,aAAiBuB,KADH,gCAEOtC,IAFP,eAIdiB,EAASoB,GAJK,sBAOhBA,EAAUE,2BAAwBC,EAClCrB,EAAWJ,EAAMpD,KAAMoD,EAAM0B,SARb,2CAAZ,uDAYRtB,EAAW,uBAAwB,mCAGpC,IAEauB,OAAQxB,IC/BX,OAA0B,yC,UCQ3ByB,GAAa,SAACC,EAAQvF,GAChC,OANgB,SAACwF,EAAKD,EAASvF,GAG/B,OAAO,IAFI,OAAGA,QAAH,IAAGA,IAAQR,GAELiG,IAAIC,SAASF,EAAKD,GAG5BI,CAAYC,GAAKL,EAASvF,I,6BC6FtB6F,OA3Ff,WAAgB,IACJC,EAAYlG,cAAZkG,QACF9F,EAAON,IAFF,EAGaK,oBAAS,GAHtB,mBAGJgG,EAHI,KAGEC,EAHF,OAIiBjG,qBAJjB,mBAIJkG,EAJI,KAIIC,EAJJ,OAKenG,qBALf,mBAKJoG,EALI,KAKGC,EALH,OAMiBrG,qBANjB,mBAMJsG,EANI,KAMIC,EANJ,OAOiBvG,mBAAS,CACjCwG,cAAe,KARR,mBAOJC,EAPI,aAUe7C,KAAlBkB,EAVG,EAUHA,MAAOQ,EAVJ,EAUIA,OACf5B,QAAQgD,IAAI,WAAYX,GAmBxBrC,QAAQgD,IAAI,SAAUD,GAEtB,IAAMhG,EAAI,uCAAG,gCAAAoC,EAAA,4DACY,6CADZ,SAEc0C,GADF,6CAC6BtF,GAFzC,cAEH0G,EAFG,gBAGkBA,EAASC,QAAQC,eAAeC,OAHlD,cAGHD,EAHG,gBAIiBF,EAASC,QAAQG,cAAcD,OAJhD,OAIHC,EAJG,OAKTV,EAASQ,GACTN,EAAUQ,GAND,4CAAH,qDAUJC,EAAI,uCAAG,8BAAAnE,EAAA,6DACToD,GAAQ,GACa,6CAFZ,SAGcV,GADF,6CAC6BtF,GAHzC,cAGH0G,EAHG,gBAIkBA,EAASC,QAAQC,eAAeC,OAJlD,cAIHD,EAJG,iBAKUF,EAASC,QAAQK,SAASlB,EAAQ,EAAG,IACvDmB,KAAK,CAAEC,KAAMpB,EAASqB,MAAMP,IAC5BQ,MAAK,SAACC,GACH5D,QAAQgD,IAAI,WAAWY,GACvBnB,EAAUmB,EAAIpB,WATT,2DAAH,qDAwBV,OAVA/F,qBAAU,WACH4F,GACCtF,OAIRiD,QAAQgD,IAAI,QAAQR,GAKhB,uCACC,eAACqB,GAAA,EAAD,CAAUC,UAAU,SAASC,GAAI,CAAEC,MAAO,QAAU1B,KAAMA,EAA1D,SAAgE,eAAC2B,GAAA,EAAD,CAAkBD,MAAM,cACrF,2BAASF,UAAU,YAAnB,UACI,sBAAKA,UAAU,UAAf,SACI,yBAAQjD,KAAK,SAASqD,QA1DZ,WAClB7B,GACAT,IACAuC,aAAaC,QAAQ,QAAQ,KAE7BhD,EAAM,YACN+C,aAAaC,QAAQ,QAAQ,GAC7BD,aAAaC,QAAQ,WAAY,cAmDzB,SAAmD/B,EAAU,oBAAsB,qBAEvF,sBAAKyB,UAAU,WAAf,SACI,uBAAKA,UAAU,OAAf,UACI,gDACA,wBAAOjD,KAAK,SAAShE,KAAK,gBAAiB6G,MAAM,IAAII,UAAU,UAAUO,UAAQ,IAEhFhC,EAAW,yBAAQyB,UAAU,UAAUI,QAASZ,EAArC,sBAA+D,yDAE3E,qBAAGQ,UAAU,aAAb,UAA2BlB,GAAkB,EAA7C,WACA,qBAAGkB,UAAU,aAAb,UAA2BpB,EAAOA,EAAM,KAAD,IAAE,GAAI,IAAM,EAAnD,IAAsD,uBAAMoB,UAAU,aAAhB,0BAGtD,yBAAQA,UAAU,aAAlB,SAA+B,sBAAKQ,IAAKC,GAAST,UAAU,aAAaU,IAAI,OAVjF,gB,kBCrFhBC,GAAY,CACdC,MAAM,8CCOOC,GALKC,aAAgB,CAClCC,YDAyB,WAAgC,IAA/B3H,EAA8B,uDAAtBuH,GAAWtH,EAAW,uCAChD0D,EAAkB1D,EAAlB0D,KAAMzD,EAAYD,EAAZC,QACd,OAAQyD,GACN,IAAK,UACH,OAAO,2BACF3D,GADL,IAEE4H,QAAS1H,IAEb,IAAK,cAEH,OAAO,2BACFF,GADL,IAEE6H,OAAQ3H,IAIZ,QACE,OAAOF,IChBX8H,SDsB0B,WAAuC,IAAtC9H,EAAqC,uDAA7BuH,GAA6B,yCAAlB5D,EAAkB,EAAlBA,KAAKzD,EAAa,EAAbA,QACnD,OAAQyD,GACJ,IAAK,eACH,kCACK3D,GADL,IAEEwH,MAAMtH,IAGZ,QACE,OAAOF,ME/BP+H,GAAmB7F,OAAO8F,sCAAwCC,KAQzDC,GALNC,aAAYV,GAAaM,GAAiBK,aAAgBC,QCUpDnD,OAVf,WACE,OACE,eAAC,IAAD,CAAUgD,MAAOA,GAAjB,SACE,eAAC,IAAD,CAAmBpG,WAAYA,EAA/B,SACE,eAACwG,GAAD,SCAOC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.8c3065f9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nexport const nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import Web3 from 'web3'\nimport getRpcUrl from './getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 })\nconst web3NoAccount = new Web3(httpProvider)\n\nconst getWeb3NoAccount = () => {\n  return web3NoAccount\n}\n\nexport { getWeb3NoAccount }\nexport default web3NoAccount","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { getWeb3NoAccount } from '../utils/web3'\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the provider change\n */\nconst useWeb3 = () => {\n  const { library } = useWeb3React()\n  const refEth = useRef(library)\n  const [web3, setweb3] = useState(library ? new Web3(library) : getWeb3NoAccount())\n\n  useEffect(() => {\n    if (library !== refEth.current) {\n      setweb3(library ? new Web3(library) : getWeb3NoAccount())\n      refEth.current = library\n    }\n  }, [library])\n\n  return web3\n}\n\nexport default useWeb3\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  data: [],\n}\n\nexport const toastsSlice = createSlice({\n  name: 'toasts',\n  initialState,\n  reducers: {\n    push: (state, action) => {\n      const { payload } = action\n      const toastIndex = state.data.findIndex((toast) => toast.id === action.payload.id)\n\n      // If id already matches remove it before adding it to the top of the stack\n      if (toastIndex >= 0) {\n        state.data.splice(toastIndex, 1)\n      }\n\n      state.data.unshift(payload)\n    },\n    remove: (state, action) => {\n      const toastIndex = state.data.findIndex((toast) => toast.id === action.payload)\n\n      if (toastIndex >= 0) {\n        state.data.splice(toastIndex, 1)\n      }\n    },\n    clear: (state) => {\n      state.data = []\n    },\n  },\n})\n\n// Actions\nexport const { clear, remove, push } = toastsSlice.actions\n\nexport default toastsSlice.reducer\n","import { useMemo } from 'react'\nimport { kebabCase } from 'lodash'\n// import {  toastTypes } from '@babefinance/uikit'\nimport { useDispatch } from 'react-redux'\nimport {\n    push as pushToast,\n    remove as removeToast,\n    clear as clearToast,\n} from './actions'\n\nconst toastTypes = {\n    SUCCESS: \"string\",\n    DANGER: \"string\",\n    WARNING: \"string\",\n    INFO: \"string\",\n};\n\n\nexport const useToast = () => {\n    const dispatch = useDispatch()\n    const helpers = useMemo(() => {\n        const push = (toast) => dispatch(pushToast(toast))\n\n        return {\n            toastError: (title, description) => {\n                return push({ id: kebabCase(title), type: toastTypes.DANGER, title, description })\n            },\n            toastInfo: (title, description) => {\n                return push({ id: kebabCase(title), type: toastTypes.INFO, title, description })\n            },\n            toastSuccess: (title, description) => {\n                return push({ id: kebabCase(title), type: toastTypes.SUCCESS, title, description })\n            },\n            toastWarning: (title, description) => {\n                return push({ id: kebabCase(title), type: toastTypes.WARNING, title, description })\n            },\n            push,\n            remove: (id) => dispatch(removeToast(id)),\n            clear: () => dispatch(clearToast()),\n        }\n    }, [dispatch])\n\n    return helpers\n}","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { BscConnector } from '@binance-chain/bsc-connector'\nimport getNodeUrl from './getRpcUrl'\n\nconst ConnectorNames = {\n    Injected: \"injected\",\n    WalletConnect: \"walletconnect\",\n    BSC: \"bsc\"\n}\n\nconst POLLING_INTERVAL = 12000\nconst rpcUrl = getNodeUrl()\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\n\nconst walletconnect = new WalletConnectConnector({\n    rpc: { [chainId]: rpcUrl },\n    bridge: 'https://bridge.walletconnect.org',\n    qrcode: true,\n    pollingInterval: POLLING_INTERVAL,\n})\n\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId] })\n\nexport const connectorsByName = {\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.BSC]: bscConnector,\n}\n\nexport const getLibrary = (provider) => {\n    return provider\n}\n","// Set of helper functions to facilitate wallet setup\n\nimport { nodes } from './getRpcUrl'\n\n/**\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\n * @returns {boolean} true if the setup succeeded, false otherwise\n */\nexport const setupNetwork = async () => {\n  const provider = (window).ethereum\n  if (provider) {\n    // const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n    // const chainId = 56\n    const chainId = 97\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [\n          {\n            chainId: `0x${chainId.toString(16)}`,\n            chainName: 'Binance Smart Chain TestNet',\n            nativeCurrency: {\n              name: 'BNB',\n              symbol: 'bnb',\n              decimals: 18,\n            },\n            rpcUrls: nodes,\n            // blockExplorerUrls: ['https://bscscan.com/'],\n            blockExplorerUrls: ['https://testnet.bscscan.com/'],\n\n          },\n        ],\n      })\n      return true\n    } catch (error) {\n      console.error(error)\n      return false\n    }\n  } else {\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\")\n    return false\n  }\n}\n\n/**\n * Prompt the user to add a custom token to metamask\n * @param tokenAddress\n * @param tokenSymbol\n * @param tokenDecimals\n * @param tokenImage\n * @returns {boolean} true if the token has been added, false otherwise\n */\nexport const registerToken = async (\n  tokenAddress,\n  tokenSymbol,\n  tokenDecimals,\n  tokenImage,\n) => {\n  const tokenAdded = await (window).ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: tokenAddress,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image: tokenImage,\n      },\n    },\n  })\n\n  return tokenAdded\n}\n","import { useCallback } from 'react'\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core'\nimport { useToast } from '../state/hooks'\nimport { connectorsByName } from '../utils/web3React'\nimport { setupNetwork } from '../utils/wallet'\n\nconst useAuth = () => {\n  const { activate, deactivate } = useWeb3React()\n  const { toastError } = useToast()\n\n  \n  const login = useCallback((connectorID) => {\n      const connector = connectorsByName[connectorID]\n      if (connector) {\n      activate(connector, async (error) => {\n        if (error instanceof UnsupportedChainIdError) {\n          const hasSetup = await setupNetwork()\n          if (hasSetup) {\n            activate(connector)\n          }\n        } else {\n          connector.walletConnectProvider = undefined\n          toastError(error.name, error.message)\n        }\n      })\n    } else {\n      toastError(\"Can't find connector\", 'The connector config is wrong')\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return { login, logout: deactivate }\n}\n\nexport default useAuth\n","export default __webpack_public_path__ + \"static/media/opensea-logo.8d0fc584.svg\";","import Abi from '../utils/Abi.json'\nimport web3NoAccount from './web3'\n\nconst getContract = (abi, address, web3) => {\n    const _web3 = web3 ?? web3NoAccount;\n    // console.log('_web3',_web3);\n    return new _web3.eth.Contract(abi, address)\n}\nexport const  MintContract=(address,web3)=>{\n    return getContract(Abi, address, web3)\n}\n","import logo from './logo.svg';\nimport React, { useState, useEffect } from 'react';\nimport './replicate.css';\nimport { useWeb3React } from '@web3-react/core'\nimport useWeb3 from './hooks/useWeb3';\nimport useAuth from '../src/hooks/useAuth'\nimport openSea from './Assests/opensea-logo.svg';\nimport { MintContract } from './utils/contractHelpers'\nimport { Backdrop } from '@material-ui/core';\nimport { CircularProgress } from '@material-ui/core';\n\nfunction App() {\n    const { account } = useWeb3React();\n    const web3 = useWeb3();\n    const [open, setOpen] = useState(true);\n    const [status, setStatus] = useState();\n    const [price, setPrice] = useState();\n    const [supply, setSupply] = useState();\n    const [inputs, setInputs] = useState({\n        payableAmount: '',\n    })\n    const { login, logout } = useAuth();\n    console.log(\"ACCOUINT\", account)\n\n    const ConnectionHandler = () => {\n        if (account) {\n            logout()\n            localStorage.setItem('flag', false)\n        } else {\n            login(\"injected\")\n            localStorage.setItem('flag', true)\n            localStorage.setItem('injected', \"injected\")\n        }\n    }\n\n    const handleChange1 = (e) => {\n\n        const { name, value } = e.target;\n        setInputs(inputs => ({ ...inputs, [name]: value }));\n    }\n\n    console.log(\"inputs\", inputs)\n\n    const data = async() =>{\n        const tokenAddress = '0xC7D94c26B724f4ebF29D9232e12a55Be32e0E799';\n        const contract = await MintContract(tokenAddress, web3);\n        const MINT_NFT_FEE = await contract.methods.MINT_NFT_FEE().call();\n        const totalSupply = await contract.methods.totalSupply().call();\n        setPrice(MINT_NFT_FEE)\n        setSupply(totalSupply)\n    }\n\n\n    const Mint = async () => {\n        setOpen(true)\n        const tokenAddress = '0xC7D94c26B724f4ebF29D9232e12a55Be32e0E799';\n        const contract = await MintContract(tokenAddress, web3);\n        const MINT_NFT_FEE = await contract.methods.MINT_NFT_FEE().call();\n        const mint = await contract.methods.bachMint(account,1, \"\")\n        .send({ from: account, value:MINT_NFT_FEE })\n        .then((res)=>{\n            console.log(\"response\",res)\n            setStatus(res.status)\n        })\n        // return mint.events.Transfer.returnValues.tokenId;\n    }\n\n    useEffect(() => {\n        if(account){\n            data()\n        }\n    })\n\n    console.log(\"price\",status)\n\n  \n\n    return (\n        <>\n         <Backdrop className=\"loader\" sx={{ color: '#000' }} open={open}><CircularProgress color=\"inherit\" /></Backdrop>\n            <section className=\"container\">\n                <div className='btn-div'>\n                    <button type=\"button\" onClick={ConnectionHandler}>{account ? \"Disconnect Wallet\" : \"Connect Wallet\"}</button>\n                </div>\n                <div className=\"card-div\">\n                    <div className='card'>\n                        <p>Amount To Mint</p>\n                        <input type=\"number\" name=\"payableAmount\"  value=\"1\" className='counter' readOnly />\n                        {/* <span className='calIcon'>-</span> <span className=\"count\">1</span> <span className='calIcon'>+</span> */}\n                        {account ?  <button className=\"mintBtn\" onClick={Mint}>MINT NOW</button> : <h6>Please Connect account</h6> }\n                       \n                        <p className=\" colerGrey\">{supply ? supply : 0}/1111</p>\n                        <p className=\" colerGrey\">{price ?price/(10**18) : 0} <span className=' colerGrey'> BSC EACH</span></p>\n\n\n                        <button className=\"openSeaBtn\"><img src={openSea} className=\"openSeaImg\" alt=\"\" /></button> </div>\n                </div>\n            </section>\n        </>\n    );\n}\n\nexport default App;\n","let initState = {\n  input:\"0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82\"\n};\n\nexport const UserReducer = (state = initState, action) => {\n  const { type, payload } = action; //object destructring\n  switch (type) {\n    case \"BALANCE\":\n      return {\n        ...state,\n        balance: payload,\n      };\n    case \"USER_REWARD\":\n      \n      return {\n        ...state,\n        reward: payload,\n      };\n\n\n    default:\n      return state;\n  }\n};\n\n\n\nexport const InputReducer = (state = initState,{type,payload}) => {\n  switch (type) {\n      case 'INPUTADDRESS':\n        return{\n          ...state,\n          input:payload\n        }\n\n    default:\n      return state;\n  }\n};\n\n","import { combineReducers } from \"redux\";\nimport { UserReducer,InputReducer } from \"../Reducers/index\";\n\nconst rootReducer = combineReducers({\n  UserReducer,\n  Getinput:InputReducer\n});\n\nexport default rootReducer;","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./rootReducer\";\n\n// compose are enhancers used for composing middlewares for redux\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n};\n\nconst store = configureStore();\n\nexport default store;","import logo from './logo.svg';\nimport './App.css';\nimport ReplicateNftContract from './ReplicateNftContract'\nimport { Provider } from 'react-redux';\nimport { Web3ReactProvider } from '@web3-react/core'\nimport store from './redux/store/index';\nimport { getLibrary } from './utils/web3React'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Web3ReactProvider getLibrary={getLibrary}>\n        <ReplicateNftContract />\n      </Web3ReactProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}